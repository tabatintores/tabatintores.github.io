{"version":3,"sources":["Layout/Layout.js","components/todo-list/AllItems.js","components/todo-list/ActiveItems.js","components/todo-list/CompletedItems.js","components/todo-list/todo-list.js","components/todo-list/Footer.js","Todo/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Layout","className","this","props","children","Component","AllItems","list","map","item","index","cls","isCompleted","push","isDeleted","join","key","onClick","onComplete","id","text","type","aria-label","e","onDelete","stopPropagation","aria-hidden","ActiveItems","CompletedItems","TodoList","currentState","onEnter","showItem","Footer","sum","forEach","activeTasksCounter","href","onCurrentStateChange","Todo","state","listItems","addItemHandler","target","value","items","length","setState","completeItemHandler","isButtonHovered","deleteItemHandler","currentStateSetter","placeholder","onKeyPress","maxLength","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6c605fa.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './Layout.css'\r\n\r\nexport default class Layout extends Component {\r\n    render() {\r\n        return (\r\n            <div className={'Layout'}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\n\r\nconst AllItems = props => {\r\n    return (\r\n        <>\r\n            {props.list.map((item, index) => {\r\n                const cls = ['list-group-item','overflow-hidden', 'activeTask'];\r\n                if (item.isCompleted) {\r\n                    cls.push('completed')\r\n                }\r\n                return(\r\n                    !item.isDeleted ?\r\n                        <li\r\n                            className={cls.join(' ')}\r\n                            key={index}\r\n                            onClick={() => props.onComplete(item.id)}\r\n                        >\r\n                            {item.text}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"close\"\r\n                                aria-label=\"Close\"\r\n                                onClick={(e) => {\r\n                                    props.onDelete(item.id)\r\n                                    e.stopPropagation()\r\n                                }}\r\n                            >\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </li>\r\n                        : null\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default AllItems;","import React from 'react'\r\n\r\nconst ActiveItems = props => {\r\n    return (\r\n        <>\r\n            {props.list.map((item, index) => {\r\n                const cls = ['list-group-item','overflow-hidden', 'activeTask'];\r\n                return(\r\n                    !item.isDeleted&&!item.isCompleted ?\r\n                        <li\r\n                            className={cls.join(' ')}\r\n                            key={index}\r\n                            onClick={() => props.onComplete(item.id)}\r\n                        >\r\n                            {item.text}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"close\"\r\n                                aria-label=\"Close\"\r\n                                onClick={() => props.onDelete(item.id)}\r\n                            >\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </li>\r\n                        : null\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ActiveItems;","import React from 'react'\r\n\r\nconst CompletedItems = props => {\r\n    return (\r\n        <>\r\n            {props.list.map((item, index) => {\r\n                const cls = ['list-group-item','overflow-hidden', 'activeTask'];\r\n                if (item.isCompleted) {\r\n                    cls.push('completed')\r\n                }\r\n                return(\r\n                    !item.isDeleted&&item.isCompleted ?\r\n                        <li\r\n                            className={cls.join(' ')}\r\n                            key={index}\r\n                            onClick={() => props.onComplete(item.id)}\r\n                        >\r\n                            {item.text}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"close\"\r\n                                aria-label=\"Close\"\r\n                                onClick={() => props.onDelete(item.id)}\r\n                            >\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </li>\r\n                        : null\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CompletedItems;","import React from 'react'\r\nimport AllItems from \"./AllItems\";\r\nimport ActiveItems from \"./ActiveItems\";\r\nimport CompletedItems from \"./CompletedItems\";\r\n\r\nconst TodoList = props => {\r\n    const showItem = () => {\r\n        const currentState = props.currentState;\r\n        if (currentState === 'All') {\r\n            return (\r\n                <AllItems\r\n                    list={props.list}\r\n                    onEnter={props.onEnter}\r\n                    onComplete={props.onComplete}\r\n                    onDelete={props.onDelete}\r\n                />\r\n            )\r\n        } else if(currentState === 'Active') {\r\n            return (\r\n                <ActiveItems\r\n                    list={props.list}\r\n                    onEnter={props.onEnter}\r\n                    onComplete={props.onComplete}\r\n                    onDelete={props.onDelete}\r\n                />\r\n            )\r\n        } else {\r\n            return (\r\n                <CompletedItems\r\n                    list={props.list}\r\n                    onEnter={props.onEnter}\r\n                    onComplete={props.onComplete}\r\n                    onDelete={props.onDelete}\r\n                />\r\n            )\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            {showItem()}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default TodoList;","import React from 'react'\r\n\r\nconst Footer = props => {\r\n    const activeTasksCounter = () => {\r\n        let sum = 0;\r\n        let items = props.list;\r\n        items.forEach((item) => {\r\n            if (item.isCompleted === false) {\r\n                sum++\r\n            }\r\n        });\r\n        return sum\r\n    };\r\n    return (\r\n        <li className=\"list-group-item\">\r\n            <div className=\"row\">\r\n                <div className=\"col-3\">\r\n                    <small>Осталось: {activeTasksCounter()}</small>\r\n                </div>\r\n                <div className=\"col-3 text-right\">\r\n                    <a href='#' onClick={() => props.onCurrentStateChange('All')}>Все</a>\r\n                </div>\r\n                <div className=\"col-3 text-right\">\r\n                    <a href='#' onClick={() => props.onCurrentStateChange('Active')}>Активные</a>\r\n                </div>\r\n                <div className=\"col-3 text-right\">\r\n                    <a href='#' onClick={() => props.onCurrentStateChange('Completed')}>Выполненные</a>\r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React, {Component} from 'react';\r\nimport './Todo.css'\r\nimport TodoList from \"../components/todo-list/todo-list\";\r\nimport Footer from \"../components/todo-list/Footer\";\r\n\r\nexport default class Todo extends Component {\r\n    state = {\r\n        listItems: [],\r\n        currentState: 'All'\r\n    };\r\n\r\n    addItemHandler = e => {\r\n        if (e.target.value) {\r\n            if (e.key === 'Enter') {\r\n                let items = this.state.listItems;\r\n                items.push({\r\n                    id: items.length + 1,\r\n                    isCompleted: false,\r\n                    text: e.target.value\r\n                });\r\n                this.setState(items);\r\n                e.target.value = ''\r\n            }\r\n        }\r\n    };\r\n    completeItemHandler = (id) => {\r\n        if (!this.state.isButtonHovered) {\r\n            let items = this.state.listItems;\r\n            if (this.state.listItems.length !== 0) {\r\n                if (!this.state.listItems[id - 1].isCompleted) {\r\n                    items[id - 1].isCompleted = true;\r\n                    this.setState(items);\r\n                } else {\r\n                    items[id - 1].isCompleted = false;\r\n                    this.setState(items);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    deleteItemHandler = (id,e) => {\r\n        let items = this.state.listItems;\r\n        items[id - 1].isCompleted = true;\r\n        items[id - 1].isDeleted = true;\r\n        this.setState(items);\r\n\r\n    };\r\n    currentStateSetter = state => {\r\n        this.setState({\r\n            currentState:state\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"Todo\">\r\n                    <h1>TODO</h1>\r\n                    <ul className=\"list-group\">\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"list-group-item form-control form-control-lg input\"\r\n                            placeholder=\"Что нужно сделать?\"\r\n                            onKeyPress={this.addItemHandler}\r\n                            maxLength={40}\r\n                        />\r\n                        <TodoList\r\n                            list={this.state.listItems}\r\n                            onEnter={this.addItemHandler}\r\n                            onComplete={this.completeItemHandler}\r\n                            onDelete={this.deleteItemHandler}\r\n                            currentState={this.state.currentState}\r\n                        />\r\n                        <Footer\r\n                            list={this.state.listItems}\r\n                            onCurrentStateChange={this.currentStateSetter}\r\n                        />\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Layout from \"./Layout/Layout\";\nimport Todo from \"./Todo/Todo\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Layout>\n                <Todo/>\n            </Layout>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}