{"version":3,"sources":["Components/CurrentWeather.js","Components/CurrentLocation.js","Components/WeatherList.js","Components/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["CurrentWeather","props","state","currentWeather","fetch","this","currentCity","then","res","json","result","setState","error","className","Component","CurrentLocation","WeatherList","weatherList","isLoaded","list","console","log","message","map","item","src","alt","MainPage","currentUnits","weather","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qPAEqBA,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,eAAgB,IAHL,E,iFAME,IAAD,OAChBC,MAAM,oDAAoDC,KAAKJ,MAAMK,YAAY,wDAC5EC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVR,eAAgBO,OAGxB,SAACE,GACG,EAAKD,SAAS,CACVC,e,+BAMhB,OACI,yBAAKC,UAAU,kBACX,qCAIA,wBAAIA,UAAU,kBAAd,KAAiC,6C,GA9BLC,aCAvBC,E,iLAEb,OACI,yBAAKF,UAAU,mBACX,4BAAI,uBAAGA,UAAU,0BAAjB,IAA+CR,KAAKJ,MAAMK,aAC1D,wD,GAL6BQ,aCAxBE,E,YACjB,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTe,YAAa,IAHF,E,iFAOE,IAAD,OAChBb,MAAM,sDAAwDC,KAAKJ,MAAMK,YAAc,8DAClFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACG,EAAKC,SAAS,CACVO,UAAU,EACVD,YAAaP,EAAOS,UAG5B,SAACP,GACG,EAAKD,SAAS,CACVO,UAAU,EACVN,e,+BAOhBQ,QAAQC,IAAIhB,KAAKH,MAAMe,aADlB,MAEkCZ,KAAKH,MAArCU,EAFF,EAEEA,MAAOM,EAFT,EAESA,SAAUD,EAFnB,EAEmBA,YACxB,OAAIL,EACO,sEAAcA,EAAMU,SACnBJ,EAIJ,yBAAKL,UAAU,eACX,yBAAKA,UAAU,8BACdI,EAAYM,KAAI,SAAAC,GAAI,OACjB,yBAAKX,UAAU,SACX,kCACA,yBAAKY,IAAI,8CAA8CC,IAAI,KAC3D,uBAAGb,UAAU,gBAAb,UACA,uBAAGA,UAAU,gBAAb,UACA,uBAAGA,UAAU,gBAAe,uBAAGA,UAAU,gBAAzC,cAXT,wF,GAjCsBC,aCGpBa,E,YACjB,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTI,YAAa,WACbsB,aAAc,SACdV,UAAU,EACVW,QAAS,IANE,E,sEAWf,OACI,yBAAKhB,UAAU,YACX,kBAAC,EAAD,CACIP,YAAaD,KAAKH,MAAMI,cAE5B,kBAAC,EAAD,CACIA,YAAaD,KAAKH,MAAMI,cAE5B,kBAAC,EAAD,CACIA,YAAaD,KAAKH,MAAMI,mB,GArBNQ,a,MCOvBgB,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD2H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,MAAK,SAAAoC,GACjCA,EAAaC,iB","file":"static/js/main.767de354.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nexport default class CurrentWeather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentWeather: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        fetch(\"http://api.openweathermap.org/data/2.5/weather?q=\"+this.props.currentCity+\"&APPID=754787b8de137a5841c87db18074d452&units=metric\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        currentWeather: result\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='CurrentWeather'>\r\n                <h3>Clear</h3>\r\n               {/* {JSON.stringify(this.state.currentWeather.weather[0].main)}\r\n                {JSON.stringify(this.state.currentWeather.weather.main)}\r\n                {this.state.currentWeather.weather.main}*/}\r\n                <h1 className='WeatherCelsius'>19<sup>℃</sup></h1>\r\n            </div>\r\n        );\r\n    }\r\n}","import React,{Component} from 'react';\r\n\r\nexport default class CurrentLocation extends Component {\r\n    render() {\r\n        return (\r\n            <div className='CurrentLocation'>\r\n                <h2><i className=\"fas fa-map-marker-alt\"></i> {this.props.currentCity}</h2>\r\n                <p>Sunday, September 26</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class WeatherList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            weatherList: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() { //Получаем API погоды указанного города за 6 дней\r\n        fetch(\"http://api.openweathermap.org/data/2.5/forecast/?q=\" + this.props.currentCity + \"&APPID=754787b8de137a5841c87db18074d452&cnt=6&units=metric\")\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        weatherList: result.list\r\n                    });\r\n                },\r\n                (error) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        console.log(this.state.weatherList)\r\n        const {error, isLoaded, weatherList} = this.state;\r\n        if (error) {\r\n            return <div>Ошибка: {error.message}</div>;\r\n        } else if (!isLoaded) {\r\n            return <div>Загрузка...</div>;\r\n        } else {\r\n            return (\r\n                <div className='WeatherList'>\r\n                    <div className=\"row justify-content-center\">\r\n                    {weatherList.map(item => (\r\n                        <div className=\"col-2\">\r\n                            <p>Mon</p>\r\n                            <img src=\"http://openweathermap.org/img/wn/01d@2x.png\" alt=\"\"/>\r\n                            <p className='List-Celsius'>28°</p>\r\n                            <p className=\"List-Celsius\">10°</p>\r\n                            <p className=\"List-Celsius\"><i className=\"fas fa-tint\"></i> 60%</p>\r\n                        </div>\r\n                    ))}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n};\r\n/*return (\r\n    <div className='WeatherList'>\r\n        <div className=\"row justify-content-center\">\r\n            <div className=\"col-2\">\r\n                <p>Mon</p>\r\n                <img src=\"http://openweathermap.org/img/wn/01d@2x.png\" alt=\"\"/>\r\n                <p className='List-Celsius'>28°</p>\r\n                <p className=\"List-Celsius\">10°</p>\r\n                <p className=\"List-Celsius\"><i className=\"fas fa-tint\"></i> 60%</p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)*/\r\n","import React, {Component} from 'react';\r\nimport CurrentWeather from \"./CurrentWeather\";\r\nimport CurrentLocation from \"./CurrentLocation\";\r\nimport WeatherList from \"./WeatherList\";\r\n\r\nexport default class MainPage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentCity: 'Orenburg',\r\n            currentUnits: 'metric',\r\n            isLoaded: false,\r\n            weather: []\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='MainPage'>\r\n                <CurrentLocation\r\n                    currentCity={this.state.currentCity}\r\n                />\r\n                <CurrentWeather\r\n                    currentCity={this.state.currentCity}\r\n                />\r\n                <WeatherList\r\n                    currentCity={this.state.currentCity}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport MainPage from \"./Components/MainPage\";\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}